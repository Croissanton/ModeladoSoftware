model P2

class Clock 
  attributes
    NOW : Integer init = 0 -- POSIX representation starting at 0
    resolution: Integer init = 1 
  operations
    tick() 
      begin
        self.NOW:=self.NOW + self.resolution;
        for o in self.ao do 
            o.tick()
        end;
      end
      post TimePasses: self.NOW = self.NOW@pre + self.resolution
    run (n:Integer)
      begin
        for i in Sequence{1..n} do
          self.tick()
        end 
      end
  constraints
    inv PositiveResolution: self.resolution > 0
end

abstract class ActiveObject
    operations
        tick() begin end
end

class Tren < ActiveObject
    attributes
        cont: Integer init = 0
        direccionNormal : Boolean
        averiado : Boolean init: false
    operations
        siguienteViaLibre(): Boolean = (self.direccionNormal implies not self.estacion.segmentoOrig->select(s | s.linea->includes(self.linea))->asSequence->first().viaNormalOcupada) and 
        (not self.direccionNormal implies not self.estacion.segmentoDest->select(s | s.linea->includes(self.linea))->asSequence->first().viaContrariaOcupada)
        move()
            begin
                self.cont:=0;
                if (self.direccionNormal) then
                    insert(self, self.estacion.segmentoOrig->select(s | s.linea->includes(self.linea))->asSequence->first()) into Circula;
                    self.segmento.viaNormalOcupada := true;
                end;
                if (not self.direccionNormal) then
                    insert(self, self.estacion.segmentoDest->select(s | s.linea->includes(self.linea))->asSequence()->first()) into Circula;
                    self.segmento.viaContrariaOcupada := true;
                end;
                delete(self, self.estacion) from Estaciona;
            end
            pre puedeCircular: (not self.averiado) and (self.segmento = null) and self.siguienteViaLibre()
            pre minutoEstacionado: self.cont >= 1
            post circula: self.segmento <> null
            post noEstacionado: self.estacion = null
        stop()
            begin
                self.cont:=0;
                delete(self, self.segmento) from Circula;
            end
            pre circulando: self.segmento <> null
            pre dosMinutos: self.cont >= 2
            post noCircula: self.segmento = null
        seAveria()
            begin
                self.averiado:=true;
            end
            pre disponible: not self.averiado
            post averiado: self.averiado
        seRepara()
            begin
                self.averiado:=false;
            end
            pre averiado: self.averiado
            post reparado: not self.averiado
        avanzaEstacion()
            begin
                if (self.direccionNormal) then
                    insert(self, self.segmento.estacionDestino) into Estaciona;
                    self.segmento.viaNormalOcupada := false;
                else
                    insert(self, self.segmento.estacionOrigen) into Estaciona;
                    self.segmento.viaContrariaOcupada := false;
                end;
                if (self.linea.principio = self.estacion) then
                self.direccionNormal := true;
                end;
                if (self.linea.final = self.estacion) then
                self.direccionNormal := false;
                end;
                self.stop();
            end
            pre circulando: self.segmento <> null
            pre dosMinutos: self.cont >= 2
        tick()
            begin
                self.cont:= self.cont + self.clock.resolution;
                if self.segmento <> null and self.cont >= 2 then 
                    self.avanzaEstacion();
                end;
                if (not self.averiado) and (self.segmento = null) and self.siguienteViaLibre() and self.cont >= 1 then
                    self.move();
                end;
            end
  statemachines
    psm TrenMovimiento
      states
        s: initial 
        estacionado [self.segmento = null]
        circulando [self.segmento <> null]   
      transitions
        s -> estacionado {create}
        estacionado -> estacionado {tick()}
        estacionado -> circulando { [not self.averiado and self.segmento = null and self.siguienteViaLibre()] tick()}
        circulando -> circulando {tick()}
        circulando -> estacionado { [self.cont >= 1] tick()}
    end
    psm TrenDisponibilidad
        states
        s: initial
        disponible [self.averiado = false]
        averiado [self.averiado = true]
        transitions
        s -> disponible {create}
        disponible -> averiado {seAveria()}
        averiado -> disponible {seRepara()}
    end
end

class Segmento
    attributes
        viaNormalOcupada :  Boolean init: false
        viaContrariaOcupada : Boolean init: false
end

class Estacion
    
end

class Linea
    
end



aggregation LineaSegmento between
    Linea [*] role linea
    Segmento [*] role segmento
end

aggregation SegmentoEstacionOrigen between
    Segmento [*] role segmentoOrig
    Estacion [1] role estacionOrigen
end

aggregation SegmentoEstacionDestino between
    Segmento [*] role segmentoDest
    Estacion [1] role estacionDestino
end

association Circula between
    Tren [0..2] role tren
    Segmento [0..1] role segmento
end

association Estaciona between
    Tren [*] role tren
    Estacion [0..1] role estacion
end

association PerteneceA between
    Tren [1..*] role tren
    Linea [1] role linea
end

association PrincipioDe between
    Estacion [1] role principio
    Linea [*] role lineaPrincipio
end

association FinalDe between
    Estacion [1] role final
    Linea [*] role lineaFinal
end

association Time between
    Clock [1] 
    ActiveObject [*] role ao ordered
end

constraints
    context Segmento inv LineasDistintas:
        self.estacionOrigen.segmentoOrig->intersection(self.estacionDestino.segmentoDest)->forAll(s1, s2 | s1 <> s2 implies s1.linea <> s2.linea)

    context Tren inv DireccionValida:
        (self.linea.principio = self.estacion implies self.direccionNormal) and
        (self.linea.final = self.estacion implies not self.direccionNormal) 
